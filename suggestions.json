{
    "sugg": [
      {
        "english": "add",
        "suggestions": "int x, y, z; z = x + y;"
      },
      {
        "english": "i want to add",
        "suggestions": "int x, y, z; z = x + y;"
      },
      {
        "english": "I want to add",
        "suggestions": "int x, y, z; z = x + y;"
      },
      {
        "english": "I want to add vars",
        "suggestions": "int x, y, z; z = x + y;"
      },
      {
        "english": "I want to add variables",
        "suggestions": "int x, y, z; z = x + y;"
      },
      {
        "english": "add the variables I created",
        "suggestions": "int x, y, z; z = x + y;"
      },
      {
          "english": "add numbers",
          "suggestions": "int x, y, z;\nz = x + y;"
      },

      {
          "english": "add two numbers",
          "suggestions": "int x, y, z;\nz = x + y;"
      },

      {
          "english": "add values",
          "suggestions": "int x, y, z;\nz = x + y;"
      },

      {
          "english": "add two values",
          "suggestions": "int x, y, z;\nz = x + y;"
      },

      {
          "english": "add ints",
          "suggestions": "int x, y, z;\nz = x + y;"
      },

      {
          "english": "add two ints",
          "suggestions": "int x, y, z;\nz = x + y;"
      },

      {
          "english": "add integers",
          "suggestions": "int x, y, z;\nz = x + y;"
      },

      {
          "english": "add two integers",
          "suggestions": "int x, y, z;\nz = x + y;"
      },
      {
        "english": "sum",
        "suggestions": "int x, y, z;\nz = x + y;"
      },
      {
        "english": "find the sum",
        "suggestions": "int x, y, z;\nz = x + y;"
      },
      {
        "english": "sum everything up",
        "suggestions": "int x, y, z;\nz = x + y;"
      },
      {
          "english": "subtract",
          "suggestions": "int x, y, z;\nz = x - y;"
      },

      {
          "english": "subtract numbers",
          "suggestions": "int x, y, z;\nz = x - y;"
      },

      {
          "english": "subtract two numbers",
          "suggestions": "int x, y, z;\nz = x - y;"
      },

      {
          "english": "subtract values",
          "suggestions": "int x, y, z;\nz = x - y;"
      },

      {
          "english": "subtract two values",
          "suggestions": "int x, y, z;\nz = x - y;"
      },

      {
          "english": "subtract ints",
          "suggestions": "int x, y, z;\nz = x - y;"
      },

      {
          "english": "subtract two ints",
          "suggestions": "int x, y, z;\nz = x - y;"
      },

      {
          "english": "subtract integers",
          "suggestions": "int x, y, z;\nz = x - y;"
      },

      {
          "english": "subtract two integers",
          "suggestions": "int x, y, z;\nz = x - y;"
      },

      {
          "english": "multiply",
          "suggestions": "int x, y, z;\nz = x * y;"
      },

      {
          "english": "multiply numbers",
          "suggestions": "int x, y, z;\nz = x * y;"
      },

      {
          "english": "multiply two numbers",
          "suggestions": "int x, y, z;\nz = x * y;"
      },

      {
          "english": "multiply values",
          "suggestions": "int x, y, z;\nz = x * y;"
      },

      {
          "english": "multiply two values",
          "suggestions": "int x, y, z;\nz = x * y;"
      },

      {
          "english": "multiply ints",
          "suggestions": "int x, y, z;\nz = x * y;"
      },

      {
          "english": "multiply two ints",
          "suggestions": "int x, y, z;\nz = x * y;"
      },

      {
          "english": "multiply integers",
          "suggestions": "int x, y, z;\nz = x * y;"
      },

      {
          "english": "multiply two integers",
          "suggestions": "int x, y, z;\nz = x * y;"
      },

      {
          "english": "divide",
          "suggestions": "int x, y, z;\nz = x / y;"
      },

      {
          "english": "divide numbers",
          "suggestions": "int x, y, z;\nz = x / y;"
      },

      {
          "english": "divide two numbers",
          "suggestions": "int x, y, z;\nz = x / y;"
      },

      {
          "english": "divide values",
          "suggestions": "int x, y, z;\nz = x / y;"
      },

      {
          "english": "divide two values",
          "suggestions": "int x, y, z;\nz = x / y;"
      },

      {
          "english": "divide ints",
          "suggestions": "int x, y, z;\nz = x / y;"
      },

      {
          "english": "divide two ints",
          "suggestions": "int x, y, z;\nz = x / y;"
      },

      {
          "english": "divide integers",
          "suggestions": "int x, y, z;\nz = x / y;"
      },

      {
          "english": "divide two integers",
          "suggestions": "int x, y, z;\nz = x / y;"
      },

      {
       "english": "print the value",
       "suggestions": "int x = 2;\nSystem.out.println(x);"
    },

    {
       "english": "print this",
       "suggestions": "String str = \"Hello World!\";\nSystem.out.println(str);"
    },

    {
       "english": "print out",
       "suggestions": "String str = \"Hello World!\";\nSystem.out.println(str);"
    },

    {
       "english": "print",
       "suggestions": "int x = 2;\nSystem.out.println(x);"
    },

    {
       "english": "println",
       "suggestions": "int x = 2;\nSystem.out.println(x);"
    },
      {
        "english": "print to console",
        "suggestions": "int x = 2;\nSystem.out.println(x);"
      },
      {
        "english": "print character one by one",
        "suggestions": "char[] try1= input.toCharArray(); for (int i=try1.length-1;i>=0;i--) System.out.print(try1[i]);"
      },
      {
        "english": "print the character one by one",
        "suggestions": "int x = 2;\nSystem.out.println(x);"
      },
    {
       "english": "scanner",
       "suggestions": "Scanner scanner = new Scanner();"
    },

    {
       "english": "user input",
       "suggestions": "Scanner scanner = new Scanner();"
    },

    {
       "english": "create a new scanner",
       "suggestions": "Scanner scanner = new Scanner();"
    },

    {
       "english": "accept user input",
       "suggestions": "Scanner scanner = new Scanner();"
    },

    {
       "english": "make a for loop",
       "suggestions": "for (int i = 0, i < 10, i++){}"
    },
      {
        "english": "scan the the string from end to start",
        "suggestions": "for (int i = 0, i < string1.length-1, i++){}"
      },
      {
        "english": "create a for loop",
        "suggestions": "for (int i = 0, i < 10, i++){}"
      },
      {
        "english": "traverse a loop",
        "suggestions": "for (int i = 0, i < 10, i++){}"
      },
      {
        "english": "create a for-loop",
        "suggestions": "for (int i = 0, i < 10, i++){}"
      },
      {
        "english": "I want to make a for loop",
        "suggestions": "for (int i = 0, i < 10, i++){}"
      },
      {
        "english": "i want to make a for loop",
        "suggestions": "for (int i = 0, i < 10, i++){}"
      },
      {
        "english": "initialize a for loop",
        "suggestions": "for (int i = 0, i < 10, i++){}"
      },
      {
       "english": "make a for loop",
       "suggestions": "for (int i = 0, i < 10, i++){}"
      },
      {
        "english": "loop on the array",
        "suggestions": "for (int i = 0, i < 10, i++){}"
      },
      {
        "english": "loop on the values",
        "suggestions": "for (int i = 0, i < 10, i++){}"
      },
      {
        "english": "loop on array.length",
        "suggestions": "for (int i = 0, i < 10, i++){}"
      },

    {
       "english": "for loop",
       "suggestions": "for (int i = 0, i < 10, i++){}"
    },

    {
       "english": "main",
       "suggestions": "public static void main(String [ ] args){}"
    },

    {
       "english": "create main function",
       "suggestions": "public static void main(String [ ] args){}"
    },

    {
       "english": "create an int",
       "suggestions": "int intValue = 1;"
    },

    {
       "english": "create a byte",
       "suggestions": "byte byteValue = 1;"
    },

      {
        "english": "create a var",
        "suggestions": "int intValue = 1;"
      },

      {
        "english": "create a variable",
        "suggestions": "int intValue = 1;"
      },
      {
        "english": "create a int var",
        "suggestions": "int intValue = 1;"
      },
      {
        "english": "create an int var",
        "suggestions": "int intValue = 1;"
      },
      {
        "english": "create an int variable",
        "suggestions": "int intValue = 1;"
      },
    {
       "english": "create a short",
       "suggestions": "short shortValue = 1;"
    },
      {
        "english": "create a short var",
        "suggestions": "short shortValue = 1;"
      },
      {
        "english": "create a short variable",
        "suggestions": "short shortValue = 1;"
      },
    {
       "english": "create a long",
       "suggestions": "long longValue = 12345;"
    },
      {
        "english": "create a long var",
        "suggestions": "long longValue = 12345;"
      },
      {
        "english": "create a long variable",
        "suggestions": "long longValue = 12345;"
      },
    {
       "english": "create a float",
       "suggestions": "float floatValue = 2.5;"
    },
      {
        "english": "create a float var",
        "suggestions": "float floatValue = 2.5;"
      },
      {
        "english": "create a float variable",
        "suggestions": "float floatValue = 2.5;"
      },
    {
       "english": "create a char",
       "suggestions": "char charValue = 'a';"
    },
      {
        "english": "create a char var",
        "suggestions": "char charValue = 'a';"
      },
      {
        "english": "create a char variable",
        "suggestions": "char charValue = 'a';"
      },
    {
       "english": "create a boolean",
       "suggestions": "boolean booleanValue = true;\nboolean booleanValue = false;"
    },
      {
        "english": "create a bool",
        "suggestions": "boolean booleanValue = true;\nboolean booleanValue = false;"
      },
    {
       "english": "create a double",
       "suggestions": "double doubleValue = 2.5;"
    },
      {
        "english": "create a double var",
        "suggestions": "double doubleValue = 2.5;"
      },
      {
        "english": "create a double variable",
        "suggestions": "double doubleValue = 2.5;"
      },

    {
       "english": "boolean",
       "suggestions": "boolean booleanValue = true;\nboolean booleanValue = false;"
    },

    {
       "english": "create an if-statement",
       "suggestions": "int x = 5;\nif (x < 10){\n  x++;\n}"
    },
      {
        "english": "create an if statement",
        "suggestions": "int x = 5;\nif (x < 10){\n  x++;\n}"
      },
    {
       "english": "create if-statment",
       "suggestions": "int x = 5;\nif (x < 10){\n  x++;\n}"
    },

    {
       "english": "if-statement",
       "suggestions": "int x = 5;\nif (x < 10){\n  x++;\n}"
    },

    {
       "english": "if statement",
       "suggestions": "int x = 5;\nif (x < 10){\n  x++;\n}"
    },

    {
       "english": "if else",
       "suggestions": "int x = 5;\nif (x < 10){\n  x++;\n}\nelse {\n  x = 5;\n}"
    },

    {
       "english": "if-else",
       "suggestions": "int x = 5;\nif (x < 10){\n  x++;\n}\nelse {\n  x = 5;\n}"
    },

    {
       "english": "two numbers are equal",
       "suggestions": "int x = 2;\nint y = 2;\nif (x == y){\n  x = x + y;\n}"
    },

    {
       "english": "equal",
       "suggestions": "int x = 2;\nint y = 2;\nif (x == y){\n  x = x + y;\n}\n\nor\n\nString str1 = \"hello\";\nString str2 = \"hello\";\nif (str1.equals(str2)){\n  str1 = str1 + str2;\n}"
    },

    {
       "english": "are equal",
       "suggestions": "int x = 2;\nint y = 2;\nif (x == y){\n  x = x + y;\n}\n\nor\n\nString str1 = \"hello\";\nString str2 = \"hello\";\nif (str1.equals(str2)){\n  str1 = str1 + str2;\n}"
    },

    {
       "english": "not equal",
       "suggestions": "x != y"
    },

    {
       "english": "less than",
       "suggestions": "x < y"
    },

    {
       "english": "less than or equal",
       "suggestions": "x <= y"
    },

    {
       "english": "greater than",
       "suggestions": "x > y"
    },

    {
       "english": "greater than or equal",
       "suggestions": "x >= y"
    },

    {
       "english": "array",
       "suggestions": "int[] intArray = new int[3];\nor\nint[] intArray = {1,2,3};\nor\nint[] intArray = new int[]{1,2,3};"
    },

    {
       "english": "create an array",
       "suggestions": "int[] intArray = new int[3];\nor\nint[] intArray = {1,2,3};\nor\nint[] intArray = new int[]{1,2,3};"
    },

    {
       "english": "create array",
       "suggestions": "int[] intArray = new int[3];\nor\nint[] intArray = {1,2,3};\nor\nint[] intArray = new int[]{1,2,3};"
    },

    {
       "english": "array of size n",
       "suggestions": "int[] intArray = new int[n];"
    },

    {
       "english": "two-dimensional array",
       "suggestions": "int[][] array = new int[5][10];\n\nor\n\nint[][] array = new int[5][];\narray[0] = new int[10];\narray[1] = new int[10];\narray[2] = new int[10];\narray[3] = new int[10];\narray[4] = new int[10];"
    },

    {
       "english": "2d array",
       "suggestions": "int[][] array = new int[5][10];\n\nor\n\nint[][] array = new int[5][];\narray[0] = new int[10];\narray[1] = new int[10];\narray[2] = new int[10];\narray[3] = new int[10];\narray[4] = new int[10];"
    },

    {
       "english": "two dimensional array",
       "suggestions": "int[][] array = new int[5][10];\n\nor\n\nint[][] array = new int[5][];\narray[0] = new int[10];\narray[1] = new int[10];\narray[2] = new int[10];\narray[3] = new int[10];\narray[4] = new int[10];"
    },

    {
       "english": "while loop",
       "suggestions": "int x = 1;\nwhile( x < 20 ) {\n  x++;\n}"
    },

    {
       "english": "break",
       "suggestions": "int x = 1;\nwhile (x < 30){\nif (x == 15){\n    break;\n  }\n  x++;\n}"
    },

    {
       "english": "make the loop stop",
       "suggestions": "int x = 1;\nwhile (x < 30){\nif (x == 15){\n    break;\n  }\n  x++;\n}"
    },

    {
       "english": "continue statement",
       "suggestions": "int x = 1;\nwhile (x < 30){\nif (x == 15){\n    continue;\n  }\n  x++;\n}"
    },

    {
       "english": "increment the counter",
       "suggestions": "i++;"
    },

    {
       "english": "increment",
       "suggestions": "i++;"
    },

    {
       "english": "increment i",
       "suggestions": "i++;"
    },

    {
       "english": "increment i by 1",
       "suggestions": "i++; "
    },

    {
       "english": "increase i",
       "suggestions": "i++;"
    },

    {
       "english": "decrease i",
       "suggestions": "i--;"
    },

    {
       "english": "decrement",
       "suggestions": "i--;"
    },

    {
       "english": "decrement i",
       "suggestions": "i--;"
    },

    {
       "english": "decrease i by 1",
       "suggestions": "i--;"
    },

    {
       "english": "iterate",
       "suggestions": "int[] intArray = new int[]{1, 2, 3, 4, 5};\nfor (int i = 0, i < intArray.length, i++){}"
    },
      {
        "english": "iterating through an array",
        "suggestions": "int[] intArray = new int[]{1, 2, 3, 4, 5};\nfor (int i = 0, i < intArray.length, i++){}"
      },
      {
        "english": "iterate thru an array",
        "suggestions": "int[] intArray = new int[]{1, 2, 3, 4, 5};\nfor (int i = 0, i < intArray.length, i++){}"
      },
      {
        "english": "iterate the array",
        "suggestions": "int[] intArray = new int[]{1, 2, 3, 4, 5};\nfor (int i = 0, i < intArray.length, i++){}"
      },
      {
        "english": "iterate thru array",
        "suggestions": "int[] intArray = new int[]{1, 2, 3, 4, 5};\nfor (int i = 0, i < intArray.length, i++){}"
      },
      {
        "english": "iterate through the array",
        "suggestions": "int[] intArray = new int[]{1, 2, 3, 4, 5};\nfor (int i = 0, i < intArray.length, i++){}"
      },
    {
       "english": "max",
       "suggestions": "int[] intArray = new int[]{1, 2, 3, 4, 5};\nint maxNumber = intArray[0];\nfor (int i = 0, i < intArray.length, i++){\nif(intArray[i] > maxNumber){\n    maxNumber = intArray[i];\n}\n}"
    },
      {
        "english": "find max",
        "suggestions": "int[] intArray = new int[]{1, 2, 3, 4, 5};\nint maxNumber = intArray[0];\nfor (int i = 0, i < intArray.length, i++){\nif(intArray[i] > maxNumber){\n    maxNumber = intArray[i];\n}\n}"
      },
      {
        "english": "find the max",
        "suggestions": "int[] intArray = new int[]{1, 2, 3, 4, 5};\nint maxNumber = intArray[0];\nfor (int i = 0, i < intArray.length, i++){\nif(intArray[i] > maxNumber){\n    maxNumber = intArray[i];\n}\n}"
      },
      {
        "english": "find the maximum",
        "suggestions": "int[] intArray = new int[]{1, 2, 3, 4, 5};\nint maxNumber = intArray[0];\nfor (int i = 0, i < intArray.length, i++){\nif(intArray[i] > maxNumber){\n    maxNumber = intArray[i];\n}\n}"
      },
      {
        "english": "Find the maximum",
        "suggestions": "int[] intArray = new int[]{1, 2, 3, 4, 5};\nint maxNumber = intArray[0];\nfor (int i = 0, i < intArray.length, i++){\nif(intArray[i] > maxNumber){\n    maxNumber = intArray[i];\n}\n}"
      },

    {
       "english": "min",
       "suggestions": "int[] intArray = new int[]{1, 2, 3, 4, 5};\nint minNumber = intArray[0];\nfor (int i = 0, i < intArray.length, i++){\n  if(intArray[i] < minNumber){\n    minNumber = intArray[i];\n}\n}"
    },
      {
        "english": "find min",
        "suggestions": "int[] intArray = new int[]{1, 2, 3, 4, 5};\nint minNumber = intArray[0];\nfor (int i = 0, i < intArray.length, i++){\n  if(intArray[i] < minNumber){\n    minNumber = intArray[i];\n}\n}"
      },
      {
        "english": "find the min",
        "suggestions": "int[] intArray = new int[]{1, 2, 3, 4, 5};\nint minNumber = intArray[0];\nfor (int i = 0, i < intArray.length, i++){\n  if(intArray[i] < minNumber){\n    minNumber = intArray[i];\n}\n}"
      },
      {
        "english": "find the minimum",
        "suggestions": "int[] intArray = new int[]{1, 2, 3, 4, 5};\nint minNumber = intArray[0];\nfor (int i = 0, i < intArray.length, i++){\n  if(intArray[i] < minNumber){\n    minNumber = intArray[i];\n}\n}"
      },
      {
        "english": "Find the minimum",
        "suggestions": "int[] intArray = new int[]{1, 2, 3, 4, 5};\nint minNumber = intArray[0];\nfor (int i = 0, i < intArray.length, i++){\n  if(intArray[i] < minNumber){\n    minNumber = intArray[i];\n}\n}"
      },

    {
       "english": "switch",
       "suggestions": "char fruit = 'Orange';\nswitch(fruit) {\n  case 'Apple' :\n    System.out.println(\"Red\"); \n    break;\n  case 'Banana' :\n    System.out.println(\"Yellow\"); \n    break;\n  case 'Orange' :\n    System.out.println(\"Orange\");\n    break;\n}"
    },

    {
       "english": "random",
       "suggestions": "import java.util.Random;\nRandom random = new Random();\nint x = random.nextInt(50);"
    },

    {
       "english": "create string",
       "suggestions": "String str = \"hello\";\nor\nString str = new String(\"hello\");"
    },

    {
       "english": "string",
       "suggestions": "String str = \"hello\";\nor\nString str = new String(\"hello\");"
    },

    {
       "english": "length of string",
       "suggestions": "String str = \"hello\";\nint length = str.length();"
    },

    {
       "english": "length of a string",
       "suggestions": "String str = \"hello\";\nint length = str.length();"
    },

    {
       "english": "split the string",
       "suggestions": "a.split(' ')"
    },

    {
       "english": "substring",
       "suggestions": "a.substring();"
    },

    {
       "english": "get the character at",
       "suggestions": "a.charAt(2);"
    },

    {
       "english": "char at",
       "suggestions": "a.charAt(2);"
    },

    {
       "english": "replace a letter in the string",
       "suggestions": "replace( \"t\", T );"
    },

    {
      "english": "replace",
      "suggestions": "replace( \"t\", T );"
    },
      {
        "english": "return true",
        "suggestions": "boolean myString = true; return myString;"
      },
      {
        "english": "return True",
        "suggestions": "boolean myString = true; return myString;"
      },
      {
        "english": "return False",
        "suggestions": "boolean myString = false; return myString;"
      },
      {
        "english": "return false",
        "suggestions": "boolean myString = false; return myString;"
      },
      {
        "english": "return the var",
        "suggestions": "return <name of var>"
      },
      {
        "english": "temp",
        "suggestions": "int temp = 0"
      },
      {
        "english": "return my var",
        "suggestions": "return <name of var>"
      },
      {
        "english": "return the variable",
        "suggestions": "return <name of var>"
      },
      {
        "english": "reverse a string",
        "suggestions": "new StringBuilder(myVar).reverse().toString()"
      },
      {
        "english": "Reverse a string",
        "suggestions": "new StringBuilder(myVar).reverse().toString()"
      },
      {
        "english": "Reverse my string",
        "suggestions": "new StringBuilder(myVar).reverse().toString()"
      },
      {
        "english": "reverse my string",
        "suggestions": "new StringBuilder(myVar).reverse().toString()"
      },
      {
        "english": "Reverse given string",
        "suggestions": "new StringBuilder(myVar).reverse().toString()"
      },
      {
        "english": "reverse given string",
        "suggestions": "new StringBuilder(myVar).reverse().toString()"
      },
      {
        "english": "reverse string1",
        "suggestions": "new StringBuilder(myVar).reverse().toString()"
      },
      {
        "english": "i need to reverse a string",
        "suggestions": "new StringBuilder(myVar).reverse().toString()"
      },
      {
        "english": "reverse the string",
        "suggestions": "new StringBuilder(myVar).reverse().toString()"
      },
      {
        "english": "reverse string",
        "suggestions": "new StringBuilder(myVar).reverse().toString()"
      },
      {
        "english": "reverse String",
        "suggestions": "new StringBuilder(myVar).reverse().toString()"
      },
      {
        "english": "reverse a string in java",
        "suggestions": "new StringBuilder(myVar).reverse().toString()"
      },
      {
        "english": "reversing a string",
        "suggestions": "new StringBuilder(myVar).reverse().toString()"
      },
      {
        "english": "Hello",
        "suggestions": "Welcome to Algo-writer! If you need help, click on Quick Tips on the previous page."
      },
      {
        "english": "this is stupid",
        "suggestions": "You're Stupid >:( ... JK ILY <3 XOXO"
      },
      {
        "english": "jason",
        "suggestions": "Good job Jason!"
      },
      {
        "english": "Jason",
        "suggestions": "Good job Jason!"
      },
      {
        "english": "Andrew",
        "suggestions": "I thought AJAX was for cleaning bathrooms."
      },
      {
        "english": "andrew",
        "suggestions": "I thought AJAX was for cleaning bathrooms."
      }
    ]
}